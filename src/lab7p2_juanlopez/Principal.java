/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lab7p2_juanlopez;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author jjlm1
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pp_trees = new javax.swing.JPopupMenu();
        jmi_load = new javax.swing.JMenuItem();
        jmi_refrescar = new javax.swing.JMenuItem();
        pp_table = new javax.swing.JPopupMenu();
        jmi_cleartb = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        tf_comandos = new javax.swing.JTextField();
        bt_enter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_arbol = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        tb_productos = new javax.swing.JTable();
        jmb_menus = new javax.swing.JMenuBar();
        jm_file = new javax.swing.JMenu();
        jmi_newfile = new javax.swing.JMenuItem();
        jmi_import = new javax.swing.JMenuItem();
        jm_window = new javax.swing.JMenu();
        jmi_clearline = new javax.swing.JMenuItem();
        jmi_clear = new javax.swing.JMenuItem();
        jmi_refresh = new javax.swing.JMenuItem();
        jm_help = new javax.swing.JMenu();
        jmi_structure = new javax.swing.JMenuItem();
        jmi_comandos = new javax.swing.JMenuItem();

        jmi_load.setText("Load File");
        jmi_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_loadActionPerformed(evt);
            }
        });
        pp_trees.add(jmi_load);

        jmi_refrescar.setText("Refresh");
        jmi_refrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_refrescarActionPerformed(evt);
            }
        });
        pp_trees.add(jmi_refrescar);

        jmi_cleartb.setText("Limpiar tabla");
        jmi_cleartb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_cleartbActionPerformed(evt);
            }
        });
        pp_table.add(jmi_cleartb);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(tf_comandos, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 460, 40));

        bt_enter.setText("ENTER");
        bt_enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt_enterMouseClicked(evt);
            }
        });
        jPanel1.add(bt_enter, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 160, 40));

        jt_arbol.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Archivos CSV");
        jt_arbol.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jt_arbol.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_arbolMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_arbol);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 180, 300));

        tb_productos.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        tb_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Categor√≠a", "Precio", "Aisle", "Bin"
            }
        ));
        tb_productos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_productosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tb_productos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, 500, 300));

        jm_file.setText("File");

        jmi_newfile.setText("New File");
        jmi_newfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_newfileActionPerformed(evt);
            }
        });
        jm_file.add(jmi_newfile);

        jmi_import.setText("Import File");
        jm_file.add(jmi_import);

        jmb_menus.add(jm_file);

        jm_window.setText("Window");

        jmi_clearline.setText("Clear Command Line");
        jmi_clearline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_clearlineActionPerformed(evt);
            }
        });
        jm_window.add(jmi_clearline);

        jmi_clear.setText("Clear Table");
        jmi_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_clearActionPerformed(evt);
            }
        });
        jm_window.add(jmi_clear);

        jmi_refresh.setText("Refresh Trees");
        jmi_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_refreshActionPerformed(evt);
            }
        });
        jm_window.add(jmi_refresh);

        jmb_menus.add(jm_window);

        jm_help.setText("Help");

        jmi_structure.setText("Product Structure");
        jm_help.add(jmi_structure);

        jmi_comandos.setText("Comandos");
        jmi_comandos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmi_comandosActionPerformed(evt);
            }
        });
        jm_help.add(jmi_comandos);

        jmb_menus.add(jm_help);

        setJMenuBar(jmb_menus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jt_arbolMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_arbolMouseClicked
        // TODO add your handling code here:
        if(evt.isMetaDown()){
            pp_trees.show(this, evt.getXOnScreen(), evt.getYOnScreen());
        }
    }//GEN-LAST:event_jt_arbolMouseClicked

    private void jmi_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_loadActionPerformed
        // TODO add your handling code here:
//        JFileChooser jfc=new JFileChooser("./");
//        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
//        int x=jfc.showOpenDialog(this);
//        if (x==JFileChooser.APPROVE_OPTION){
//            DefaultMutableTreeNode nodo=new DefaultMutableTreeNode(jfc.getSelectedFile().getName());
//            DefaultTreeModel tm=(DefaultTreeModel) jTree1.getModel();
//            DefaultMutableTreeNode raiz=(DefaultMutableTreeNode)tm.getRoot();
//            raiz.add(nodo);
//            tm.reload();
//        }
        if(jt_arbol.getSelectionPath().getLastPathComponent()!=null){
            try {
                DefaultMutableTreeNode nod=(DefaultMutableTreeNode)jt_arbol.getSelectionPath().getLastPathComponent();
                String nam=nod.toString();
                System.out.println(nam);
                com=nam;
                load();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jmi_loadActionPerformed

    private void bt_enterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bt_enterMouseClicked
        // TODO add your handling code here:
        String comando=tf_comandos.getText();
        comando(comando);
        
    }//GEN-LAST:event_bt_enterMouseClicked

    private void jmi_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_clearActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_jmi_clearActionPerformed

    private void jmi_clearlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_clearlineActionPerformed
        // TODO add your handling code here:
        tf_comandos.setText("");
    }//GEN-LAST:event_jmi_clearlineActionPerformed

    private void jmi_comandosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_comandosActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "./load: Sirve para cargar un archivo al arbol\n./create: Sirve para agregar un nuevo archivo a la ROM\n./clear: Vac√≠a la tabla\n./refresh: Refresca el √°rbol");
    }//GEN-LAST:event_jmi_comandosActionPerformed

    private void jmi_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_refreshActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_jmi_refreshActionPerformed

    private void jmi_refrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_refrescarActionPerformed
        // TODO add your handling code here:
        refresh();
    }//GEN-LAST:event_jmi_refrescarActionPerformed

    private void jmi_newfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_newfileActionPerformed
        try {
            // TODO add your handling code here:
            String nombre=JOptionPane.showInputDialog("Nombre del doc");
            com=nombre;
            create();
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmi_newfileActionPerformed

    private void tb_productosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_productosMouseClicked
        // TODO add your handling code here:
        if (evt.isMetaDown()) {
            pp_table.show(this, evt.getXOnScreen(), evt.getYOnScreen());
        }
    }//GEN-LAST:event_tb_productosMouseClicked

    private void jmi_cleartbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmi_cleartbActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_jmi_cleartbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }
    public void comando(String comando){
        String[] eva=comando.split(" ");
        com=eva[1];
        if ("./load".equals(eva[0])) {
            try {
                load();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if("./create".equals(eva[0])){
            try {
                create();
            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if("./clear".equals(eva[0])){
            clear();
            
        }else if("./refresh".equals(eva[0])){
            refresh();
        }
        
    }
    
    public void load() throws IOException{
       File nada=null;
       FileReader fr=null;
       BufferedReader br=null;
       Scanner leer=null;
       nada=new File("./"+com);
       fr=new FileReader(nada);
       br=new BufferedReader(fr);
       String per="";
        while ((per=br.readLine())!=null) {
            String next = br.readLine();
            System.out.println(next);
        }
        System.out.println("Aqui nada");
        
        leer=new Scanner(nada);
        leer.useDelimiter(",");
        while (leer.hasNext()) {
//            int id=leer.nextInt();
//            String nom=leer.next();
//            String cat=leer.next();
//            double preci=Double.parseDouble(leer.next());
//            int ais=Integer.parseInt(leer.next());
//            int bin=Integer.parseInt(leer.next());
//            productos.add(new Productos(id, nom, cat, preci, ais, bin));
////            String next = leer.next();
////            System.out.println(next);
            productos.add(new Productos(leer.nextInt(), leer.nextLine(), leer.nextLine(), leer.nextDouble(), leer.nextInt(), leer.nextInt()));
        }
        System.out.println(productos);
        System.out.println("TAmpoco aqu√≠");
        
        AdminProductos ap=new AdminProductos("./"+com);
       ap.cargarArchivo();
       DefaultTableModel modelo=(DefaultTableModel)tb_productos.getModel();
        System.out.println("llegue");
        System.out.println(ap.getProductos());
        for (Productos p : ap.getProductos()) {
            Object [] obj={p.getId(),p.getNombre(),p.getCategoria(),p.getPrecio(),p.getAisle(),p.getBin()};
            modelo.addRow(obj);
            System.out.println("1");
        }
        tb_productos.setModel(modelo);
        System.out.println("aqui");
        ap.escribirArchivo();
        
    }
    
    public void create() throws IOException{
        String nombre=com;
        FileWriter fw=null;
        BufferedWriter bw=null;
        File nuevo=new File("./"+com);
        fw=new FileWriter(nuevo,true);
        bw=new BufferedWriter(fw);
        DefaultTableModel bb=(DefaultTableModel)tb_productos.getModel();
        System.out.println(bb.getRowCount());
        System.out.println(bb.getColumnCount());
        try{
        for (int i = 0; i < bb.getRowCount(); i++) {
            Object [] objetos=new Object[6];
            for (int j = 0; j < bb.getColumnCount(); j++) {
                objetos[j]=bb.getValueAt(i, j);
            }
            for (Object o : objetos) {
               if(o!=null){
                bw.write((String)o+",");
               }
            }
            
        }
        bw.flush();
        }catch (Exception ex){
            ex.printStackTrace();
        }
        bw.close();
        fw.close();
    }
    
    public void clear(){
        DefaultTableModel tt=(DefaultTableModel)tb_productos.getModel();
        DefaultTableModel bb=(DefaultTableModel)tb_productos.getModel();
        for (int i = 0; i < bb.getRowCount(); i++) {
            for (int j = 0; j < bb.getColumnCount(); j++) {
                bb.setValueAt("", i, j);
            }
               
        }
        
        tb_productos.setModel(tt);
    
    }
    
    public void refresh(){
        File a=new File("./");
        File[] control=a.listFiles();
        for (int i = 0; i < control.length; i++) {
            if (control[i].isFile()){
                if (control[i].getName().endsWith(".txt")){
            DefaultMutableTreeNode nodo=new DefaultMutableTreeNode(control[i].getName());
            DefaultTreeModel tm=(DefaultTreeModel) jt_arbol.getModel();
            DefaultMutableTreeNode raiz=(DefaultMutableTreeNode)tm.getRoot();
            raiz.add(nodo);
            tm.reload();
                }
            }
        }
    }
    

    String com="";
    ArrayList <Productos> productos=new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_enter;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu jm_file;
    private javax.swing.JMenu jm_help;
    private javax.swing.JMenu jm_window;
    private javax.swing.JMenuBar jmb_menus;
    private javax.swing.JMenuItem jmi_clear;
    private javax.swing.JMenuItem jmi_clearline;
    private javax.swing.JMenuItem jmi_cleartb;
    private javax.swing.JMenuItem jmi_comandos;
    private javax.swing.JMenuItem jmi_import;
    private javax.swing.JMenuItem jmi_load;
    private javax.swing.JMenuItem jmi_newfile;
    private javax.swing.JMenuItem jmi_refrescar;
    private javax.swing.JMenuItem jmi_refresh;
    private javax.swing.JMenuItem jmi_structure;
    private javax.swing.JTree jt_arbol;
    private javax.swing.JPopupMenu pp_table;
    private javax.swing.JPopupMenu pp_trees;
    private javax.swing.JTable tb_productos;
    private javax.swing.JTextField tf_comandos;
    // End of variables declaration//GEN-END:variables
}
